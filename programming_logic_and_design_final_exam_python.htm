<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
	<meta name='generator' content='ExamView HTML Generator 1.0.5'>
	<meta name='robots' content='noindex,nofollow'>
	<title>Programming Logic and Design Final Examination Python</title>
	<style type='text/css'>
		.spacer { line-height:.7em; }
		.title { font-size:13pt; font-weight:bold; font-family:"Times New Roman", "Times", serif; color:#000000; }
		.qnumber { font-size:12pt; font-family:"Times New Roman", "Times", serif; color:#000000; text-align:right; }
		.choice { font-size:12pt; font-family:"Times New Roman", "Times", serif; color:#000000; }
		.default { font-size:12pt; font-family:"Times New Roman", "Times", serif; color:#000000; }
		.qinfo { font-size:12pt; font-family:"Times New Roman", "Times", serif; color:#000000; }
		.points { font-size:8pt; font-family:"Times New Roman", "Times", serif; color:#000000; }
		TD.pad { padding: 0pt 4pt 0pt 4pt; }
		.font1 { font-family:"Times New Roman", "Times", serif; }
		.font2 { font-family:"Arial", "Helvetica", sans-serif; }
		.font3 { font-family:"Arial", "Helvetica", sans-serif; }
	</style>
<script type='text/javascript' language='JavaScript1.1'>
<!--
	// Copyright (c) 2000-2008 eInstruction Corp.
	var listMap = '111111111111111111111111111111111111111111111111111111111111';
	var qtypeMap = '222222222222222222222222222222222222222222222222222222222222';
	var ansMap = new Array(60);
	var ptsMap = new Array(60);
	ansMap[0] = '40';
	ptsMap[0] = 1;
	ansMap[1] = '46';
	ptsMap[1] = 1;
	ansMap[2] = '47';
	ptsMap[2] = 1;
	ansMap[3] = '47';
	ptsMap[3] = 1;
	ansMap[4] = '41';
	ptsMap[4] = 1;
	ansMap[5] = '42';
	ptsMap[5] = 1;
	ansMap[6] = '43';
	ptsMap[6] = 1;
	ansMap[7] = '4c';
	ptsMap[7] = 1;
	ansMap[8] = '48';
	ptsMap[8] = 1;
	ansMap[9] = '48';
	ptsMap[9] = 1;
	ansMap[10] = '4f';
	ptsMap[10] = 1;
	ansMap[11] = '4f';
	ptsMap[11] = 1;
	ansMap[12] = '4f';
	ptsMap[12] = 1;
	ansMap[13] = '4d';
	ptsMap[13] = 1;
	ansMap[14] = '4d';
	ptsMap[14] = 1;
	ansMap[15] = '53';
	ptsMap[15] = 1;
	ansMap[16] = '53';
	ptsMap[16] = 1;
	ansMap[17] = '53';
	ptsMap[17] = 1;
	ansMap[18] = '52';
	ptsMap[18] = 1;
	ansMap[19] = '57';
	ptsMap[19] = 1;
	ansMap[20] = '56';
	ptsMap[20] = 1;
	ansMap[21] = '54';
	ptsMap[21] = 1;
	ansMap[22] = '54';
	ptsMap[22] = 1;
	ansMap[23] = '59';
	ptsMap[23] = 1;
	ansMap[24] = '5a';
	ptsMap[24] = 1;
	ansMap[25] = '5b';
	ptsMap[25] = 1;
	ansMap[26] = '5f';
	ptsMap[26] = 1;
	ansMap[27] = '5f';
	ptsMap[27] = 1;
	ansMap[28] = '59';
	ptsMap[28] = 1;
	ansMap[29] = '5f';
	ptsMap[29] = 1;
	ansMap[30] = '5e';
	ptsMap[30] = 1;
	ansMap[31] = '45';
	ptsMap[31] = 1;
	ansMap[32] = '40';
	ptsMap[32] = 1;
	ansMap[33] = '42';
	ptsMap[33] = 1;
	ansMap[34] = '47';
	ptsMap[34] = 1;
	ansMap[35] = '44';
	ptsMap[35] = 1;
	ansMap[36] = '47';
	ptsMap[36] = 1;
	ansMap[37] = '43';
	ptsMap[37] = 1;
	ansMap[38] = '4b';
	ptsMap[38] = 1;
	ansMap[39] = '4d';
	ptsMap[39] = 1;
	ansMap[40] = '4b';
	ptsMap[40] = 1;
	ansMap[41] = '4a';
	ptsMap[41] = 1;
	ansMap[42] = '4e';
	ptsMap[42] = 1;
	ansMap[43] = '49';
	ptsMap[43] = 1;
	ansMap[44] = '4c';
	ptsMap[44] = 1;
	ansMap[45] = '4e';
	ptsMap[45] = 1;
	ansMap[46] = '52';
	ptsMap[46] = 1;
	ansMap[47] = '53';
	ptsMap[47] = 1;
	ansMap[48] = '51';
	ptsMap[48] = 1;
	ansMap[49] = '50';
	ptsMap[49] = 1;
	ansMap[50] = '50';
	ptsMap[50] = 1;
	ansMap[51] = '51';
	ptsMap[51] = 1;
	ansMap[52] = '57';
	ptsMap[52] = 1;
	ansMap[53] = '56';
	ptsMap[53] = 1;
	ansMap[54] = '5a';
	ptsMap[54] = 1;
	ansMap[55] = '5a';
	ptsMap[55] = 1;
	ansMap[56] = '5b';
	ptsMap[56] = 1;
	ansMap[57] = '59';
	ptsMap[57] = 1;
	ansMap[58] = '5e';
	ptsMap[58] = 1;
	ansMap[59] = '5f';
	ptsMap[59] = 1;
	function HandleSubmit(f)
	{
		var	MAGIC = 840;
		var	totalCorrect = 0;
		var	totalPossible = 0;
		var	numCorrect = 0;
		var	numPossible = 0;
		var	numBlank = 0;
		var	index;
		var	msg;
		var	i;

		f.student_name.value = StripSpaces(f.student_name.value);
		f.student_id.value = StripSpaces(f.student_id.value);
		f.student_email.value = StripSpaces(f.student_email.value);

		FixMR(f);
		FixMTF(f);
		index = 0;
		for (i=0; i < f.length; ++i) {
			if (f.elements[i].name.indexOf(":") > 0) {
				if (listMap.charAt(index) == "1") {
					listIndex = f.elements[i].selectedIndex;
					text = StripSpaces(f.elements[i].options[listIndex].value);
				} else {
					f.elements[i].value = StripSpaces(f.elements[i].value);
					text = f.elements[i].value;
				}

				if (text.length == 0)
					++numBlank;
				++index;
			}
		}

		if (f.student_name.value == "") {
			alert("Student name cannot be blank.");
			return(false);
		}

		if (numBlank > 0) {
			if (numBlank == 1)
				msg = "1 question";
			else
				msg = numBlank + " questions";
			if (!confirm("You have not answered " + msg +
				"  Are you sure you want to end the test?"))
				return(false);
		}

		index = 0;
		var scoreDetails = new Array();
		for (i=0; i < f.length; ++i) {
			if (f.elements[i].name.indexOf(":") > 0) {
				if (listMap.charAt(index) == "1") {
					listIndex = f.elements[i].selectedIndex;
					text = f.elements[i].options[listIndex].value;
				} else
					text = f.elements[i].value;

				numPossible = ptsMap[index] * MAGIC;
				if (ansMap[index] == "")
					scoreDetails[index] = "?--";
				else {
					var scoreResult = ScoreAnswer(index, text, numPossible);
					numCorrect = scoreResult.numPoints;
					scoreDetails[index] = (scoreResult.isCorrect) ? " " : "X";
					scoreDetails[index] += (Math.round(numCorrect * 100 / MAGIC) / 100).toString();
					totalCorrect += numCorrect;
					totalPossible += numPossible;
				}

				scoreDetails[index] += "/" + (numPossible / MAGIC);
				++index;
			}
		}

		f.score_details.value = scoreDetails.join("|");
		f.score_correct.value = Math.round(totalCorrect * 100 / MAGIC) / 100;
		f.score_possible.value = Math.round(totalPossible * 100 / MAGIC) / 100;
		if (totalPossible > 0)
			f.score_percent.value = Math.round(100.0 * totalCorrect / totalPossible);
		else
			f.score_percent.value = 0;

		return(true);
	}

	function TranslateAnswer(s, answerIndex)
	{
		var	value;
		var	newString;
		var	code;
		var	i;

		value = (answerIndex % 31) + 1;
		newString = "";
		for (i=0; i < s.length; i += 2) {
			code = parseInt(s.substring(i, i + 2), 16);
			newString += String.fromCharCode(code ^ value);
		}

		return(newString);
	}

	function ScoreAnswer(answerIndex, responseText, pointsPossible)
	{
		var answerText = TranslateAnswer(ansMap[answerIndex], answerIndex);
		var qtype = qtypeMap.charAt(answerIndex);
		var nrExactMatch = false;
		var result = new Array();

		result.numPoints = 0;
		result.isCorrect = false;

		if (qtype == "3" && answerText.substring(0, 2) == "p:") {
			answerText = answerText.substr(2);
			if (responseText.toUpperCase() == answerText.toUpperCase())
				result.isCorrect = true;
			else
				result.numPoints = MultiResponseCompare(responseText, answerText, pointsPossible);
		} else if (qtype == "6") {
			if (answerText.substring(0, 2) == "==") {
				answerText = answerText.substr(2);
				nrExactMatch = true;
			}
			if (NumericCompare(responseText, answerText, nrExactMatch))
				result.isCorrect = true;
		} else if (qtype == "7") {
			if (CompletionCompare(responseText, answerText))
				result.isCorrect = true;
		} else if (responseText.toUpperCase() == answerText.toUpperCase())
			result.isCorrect = true;

		if (result.isCorrect)
			result.numPoints = pointsPossible;

		return(result);
	}

	function StripSpaces(s)
	{
		var	len;
		var	i;

		len = s.length;
		for (i=len - 1; i >= 0 && s.charAt(i) == " "; --i)
			len = i;

		if (len == 0)
			s = "";
		else if (len != s.length)
			s = s.substring(0, len);

		return(s);
	}

	function MultiResponseCompare(responseText, answerText, pointsPossible)
	{
	}

	function NumericCompare(response, answer, exactMatch)
	{
	}


	function CompletionCompare(responseText, answerText)
	{
		return(false);
	}

	function FixMTF(f)
	{
	}

	function FixMR(f)
	{
	}

	function AllowReset()
	{
		return(window.confirm("Do you want to clear all of your answers?"));
	}

	function Restart()
	{
		if (AllowReset()) {
			document.TestForm.onreset = function() { };
			document.TestForm.reset();
			document.TestForm.onreset = function() { AllowReset(); };
		}
	}
// -->
</script>
</head>
<body onResize='if(document.layers && navigator.appVersion.indexOf("Win") < 0){history.go(0);}'
bgcolor='#FFFFFF' style='background-image:url(programming_logic_a_files/header.gif); background-repeat:no-repeat'>
<noscript>
	<h3><font color='#FF0000'>Javascript not enabled</font></h3>
</noscript>
<script type='text/javascript' language='JavaScript'>
<!--
if (navigator.appName.indexOf("Netscape") >= 0) {
	if (parseInt(navigator.appVersion.charAt(0)) < 4)
		alert("This document requires Netscape Navigator version 4.0 or later.");
} else if (navigator.appName.indexOf("Explorer") >= 0) {
	if (parseInt(navigator.appVersion.charAt(0)) < 4)
		alert("This document requires Internet Explorer version 4.0 or later.");
}
// -->
</script>
<form name='TestForm' action='http://score.examview.com/cgi-bin/results.cgi' method='POST'
	onSubmit='return(HandleSubmit(this))' onReset='return(AllowReset())'>
<input type='hidden' name='product_version' value='6.2.1'>
<input type='hidden' name='instructor_name' value='Levi A. Corvera'>
<input type='hidden' name='instructor_formalname' value='Levi A. Corvera'>
<input type='hidden' name='instructor_email' value='corveralevistudents@gmail.com'>
<input type='hidden' name='instructor_org' value='SNSU'>
<input type='hidden' name='instructor_city' value='Surigao City'>
<input type='hidden' name='instructor_state' value='13'>
<input type='hidden' name='test_name' value='Programming Logic and Design Final Examination Python'>
<input type='hidden' name='other_label' value='Other'>
<input type='hidden' name='test_mixed_questions' value='0'>
<input type='hidden' name='score_correct' value='0'>
<input type='hidden' name='score_possible' value='0'>
<input type='hidden' name='score_percent' value='0'>
<input type='hidden' name='score_subjective' value='0'>
<input type='hidden' name='score_details' value=''>
<input type='hidden' name='score_showresults' value='1'>
<div class='spacer'>&nbsp;</div>
<div class='default'>
	<div style='margin-left:1em'>
	<b>Name:</b>&nbsp;<input type='text' name='student_name' size='30'> &nbsp;&nbsp;
	<b>ID:</b>&nbsp;<input type='text' name='student_id' size='12'><br>
	<div class='spacer'>&nbsp;</div>
	<b>Email:</b>&nbsp;<input type='text' name='student_email' size='45'><br><br>
	</div>
</div>
<div class='title'>Programming Logic and Design Final Examination Python</div>

<table align='left' width='100%' border='0' cellpadding='0' cellspacing='0'>
<tr valign='top'>
	<td colspan='3'><br>
<div class='default'><b>Multiple Choice</b><span style='font-size:10pt'><br></span><i>Identify the
choice that best completes the statement or answers the question.</i></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:1' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;1.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>What would you do if a test case fails due to an error in the code?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>Debug the code to identify and fix the issue, then rerun the test.</span></td><td
width='4%'><div class='choice'>c.</div></td><td width='46%'><span class='default'>Ignore the error,
as the code seems to work in other areas.</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>Write a new test case that avoids the failed
one.</span></td><td><div class='choice'>d.</div></td><td><span class='default'>Mark the test case as
passed, since the error is known.</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:2' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;2.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>Which of the following is an example of encapsulation in OOP?<br>class
Account:<br>&nbsp;&nbsp;&nbsp; def __init__(self,
balance):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.__balance =
balance<br><br>&nbsp;&nbsp;&nbsp; def deposit(self,
amount):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if amount &gt;
0:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.__balance +=
amount<br><br>&nbsp;&nbsp;&nbsp; def get_balance(self):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return self.__balance<br></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>The deposit method is private.</span></td><td width='4%'><div
class='choice'>c.</div></td><td width='46%'><span class='default'>Both deposit and get_balance
methods should be private.</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>The get_balance method is
redundant.</span></td><td><div class='choice'>d.</div></td><td><span class='default'>The __balance
attribute is private and cannot be accessed directly from outside the
class.</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:3' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;3.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>A function is needed to compute the cumulative sum of numbers in a list. For
example, &#091;1, 2, 3, 4&#093; should return &#091;1, 3, 6, 10&#093;. Which implementation is NOT
correct?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>def cumulative_sum(lst):<br>&nbsp;&nbsp;&nbsp; result =
&#091;&#093;<br>&nbsp;&nbsp;&nbsp; total = 0<br>&nbsp;&nbsp;&nbsp; for num in
lst:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; total +=
num<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result.append(total)<br>&nbsp;&nbsp;&nbsp; return
result</span></td><td width='4%'><div class='choice'>c.</div></td><td width='46%'><span
class='default'>All of the choices</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>def cumulative_sum(lst):<br>&nbsp;&nbsp;&nbsp;
return &#091;sum(lst&#091;:i+1&#093;) for i in range(len(lst))&#093;</span></td><td><div
class='choice'>d.</div></td><td><span class='default'>def cumulative_sum(lst):<br>&nbsp;&nbsp;&nbsp;
return &#091;i*(i+1)//2 for i in lst&#093;</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:4' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;4.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>You have a base class Shape with a method area() that returns the area of the
shape. You are given a derived class Circle that overrides the area() method. If you call the area()
method using an object of the Shape class, which version of the method will be executed?<br>class
Shape:<br>&nbsp;&nbsp;&nbsp; def area(self):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
0<br><br>class Circle(Shape):<br>&nbsp;&nbsp;&nbsp; def
area(self):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 3.14 * (self.radius **
2)<br><br>shape = Shape()<br>circle = Circle()<br></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>The method will raise an error</span></td><td width='4%'><div
class='choice'>c.</div></td><td width='46%'><span class='default'>The Shape class
method</span></td></tr><tr valign='baseline'><td><div class='choice'>b.</div></td><td><span
class='default'>The Circle class method</span></td><td><div class='choice'>d.</div></td><td><span
class='default'>Both methods will be executed</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:5' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;5.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>You need to find the index of the first occurrence of the number 15 in the list
lst = &#091;5, 10, 15, 20, 15, 25&#093;. Which code is correct?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>lst.find(15)<br></span></td><td width='4%'><div class='choice'>c.</div></td><td
width='46%'><span class='default'>15 in lst<br></span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>lst&#091;15&#093;<br></span></td><td><div
class='choice'>d.</div></td><td><span
class='default'>lst.index(15)<br></span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:6' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;6.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>You have a list lst = &#091;1, 2, 3, 4, 5, 6&#093;. You want to extract every
second element to get &#091;1, 3, 5&#093;. Which slicing operation achieves this?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>lst&#091;1::2&#093;</span></td><td width='4%'><div class='choice'>c.</div></td><td
width='46%'><span class='default'>lst&#091;:3&#093;</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>lst&#091;::-1&#093;</span></td><td><div
class='choice'>d.</div></td><td><span
class='default'>lst&#091;::2&#093;</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:7' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;7.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>Which of the following is the primary goal of unit testing in Python?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>To test the behavior of the entire system</span></td><td width='4%'><div
class='choice'>c.</div></td><td width='46%'><span class='default'>To analyze performance and optimize
the code</span></td></tr><tr valign='baseline'><td><div class='choice'>b.</div></td><td><span
class='default'>To identify issues in the deployment environment</span></td><td><div
class='choice'>d.</div></td><td><span class='default'>To ensure that individual functions or methods
work as expected</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:8' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;8.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>You are given lst = &#091;10, 20, 30, 40, 50&#093;. Which slice gives the
sublist &#091;30, 40&#093;?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>lst&#091;2:4&#093;<br></span></td><td width='4%'><div class='choice'>c.</div></td><td
width='46%'><span class='default'>lst&#091;1:4&#093;<br></span></td></tr><tr
valign='baseline'><td><div class='choice'>b.</div></td><td><span
class='default'>lst&#091;-3:-1&#093;<br></span></td><td><div class='choice'>d.</div></td><td><span
class='default'>both lst&#091;2:4&#093; and lst&#091;-3:-1&#093;</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:9' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;9.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>You need to delete the second element from the list lst = &#091;10, 20, 30,
40&#093;. Which code achieves this?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>del lst&#091;1&#093;</span></td><td width='4%'><div class='choice'>c.</div></td><td
width='46%'><span class='default'>All are correct</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>lst.remove(20)</span></td><td><div
class='choice'>d.</div></td><td><span class='default'>lst.pop(1)</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:10' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;10.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>You are designing a function to accept an indefinite number of arguments and
return their product. Which implementation meets this requirement?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>def product(*args):<br>&nbsp;&nbsp;&nbsp; result = 0<br>&nbsp;&nbsp;&nbsp; for num in
args:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result += num<br>&nbsp;&nbsp;&nbsp; return
result</span></td><td width='4%'><div class='choice'>c.</div></td><td width='46%'><span
class='default'>def product(args):<br>&nbsp;&nbsp;&nbsp; result = 1<br>&nbsp;&nbsp;&nbsp; for num in
args:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result *= num<br>&nbsp;&nbsp;&nbsp; return
result</span></td></tr><tr valign='baseline'><td><div class='choice'>b.</div></td><td><span
class='default'>def product(*args):<br>&nbsp;&nbsp;&nbsp; result = 1<br>&nbsp;&nbsp;&nbsp; for num in
args:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result *= num<br>&nbsp;&nbsp;&nbsp; return
result</span></td><td><div class='choice'>d.</div></td><td><span class='default'>def
product(*args):<br>&nbsp;&nbsp;&nbsp; return sum(args)</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:11' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;11.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>What happens when you use the super() function in the following code?<br>class
A:<br>&nbsp;&nbsp;&nbsp; def __init__(self):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
print(&quot;Class A constructor&quot;)<br><br>class B(A):<br>&nbsp;&nbsp;&nbsp; def
__init__(self):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
super().__init__()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print(&quot;Class B
constructor&quot;)<br><br>b = B()<br></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>It will raise an error since super() is not used correctly.</span></td><td
width='4%'><div class='choice'>c.</div></td><td width='46%'><span class='default'>It will call the
constructor of class A only.</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>It will call the constructor of class B first,
then A.</span></td><td><div class='choice'>d.</div></td><td><span class='default'>It will call the
constructor of class A before B.</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:12' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;12.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>You are building a program to calculate the monthly payment for a loan using the
formula:<br><img width='140' height='46' align='bottom' alt="mc012-1.jpg"
src="programming_logic_a_files/mc012-1.jpg" border='0'><br>Where: <br>P is the principal loan
amount<br>r is the monthly interest rate (annual rate divided by 12)<br>n is the number of
months.<br><br>Which of the following functions is best defined to calculate and return the monthly
payment?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'>def calculate_monthly_payment(P, r, n):<br>&nbsp;&nbsp;&nbsp; return (P + r + n) /
3</span></td></tr><tr valign='baseline'><td><div class='choice'>b.</div></td><td><span
class='default'>def calculate_monthly_payment(P, r, n):<br>&nbsp;&nbsp;&nbsp; print(P * r * (1 +
r)**n / ((1 + r)**n - 1))</span></td></tr><tr valign='baseline'><td><div
class='choice'>c.</div></td><td><span class='default'>def calculate_monthly_payment(P, r,
n):<br>&nbsp;&nbsp;&nbsp; return P * r * (1 + r)**n / ((1 + r)**n - 1)</span></td></tr><tr
valign='baseline'><td><div class='choice'>d.</div></td><td><span class='default'>def
calculate_monthly_payment():<br>&nbsp;&nbsp;&nbsp; P = 100000<br>&nbsp;&nbsp;&nbsp; r = 0.05 /
12<br>&nbsp;&nbsp;&nbsp; n = 60<br>&nbsp;&nbsp;&nbsp; return P * r * (1 + r)**n / ((1 + r)**n -
1)</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:13' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;13.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>You have the list lst = &#091;1, 2, 3, 4, 5&#093; and need to double every
element to get &#091;2, 4, 6, 8, 10&#093;. Which approach is correct?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>All of the choices</span></td><td width='4%'><div class='choice'>c.</div></td><td
width='46%'><span class='default'>list(map(lambda x: x * 2, lst))<br></span></td></tr><tr
valign='baseline'><td><div class='choice'>b.</div></td><td><span class='default'>&#091;x * 2 for x in
lst&#093;<br></span></td><td><div class='choice'>d.</div></td><td><span class='default'>lst *
2<br></span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:14' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;14.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>What is the output of the following code?<br>class Car:<br>&nbsp;&nbsp;&nbsp;
def __init__(self, make, model):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.make =
make<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.model = model<br><br>&nbsp;&nbsp;&nbsp; def
__str__(self):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return f&quot;{self.make}
{self.model}&quot;<br><br>car = Car(&quot;Toyota&quot;, &quot;Corolla&quot;)<br>print(car)<br></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>Car Object at memory address</span></td><td width='4%'><div
class='choice'>c.</div></td><td width='46%'><span class='default'>Toyota Corolla</span></td></tr><tr
valign='baseline'><td><div class='choice'>b.</div></td><td><span class='default'>Error, __str__ is
not properly defined</span></td><td><div class='choice'>d.</div></td><td><span
class='default'>__str__ method is not called</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:15' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;15.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>You need to write a function that checks if all elements in a list are unique.
Which implementation is NOT correct?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>def all_unique(lst):<br>&nbsp;&nbsp;&nbsp; return all(lst.count(x) == 1 for x in
lst)</span></td><td width='4%'><div class='choice'>c.</div></td><td width='46%'><span
class='default'>def all_unique(lst):<br>&nbsp;&nbsp;&nbsp; return len(lst) ==
len(set(lst))</span></td></tr><tr valign='baseline'><td><div class='choice'>b.</div></td><td><span
class='default'>def all_unique(lst):<br>&nbsp;&nbsp;&nbsp; return sorted(lst) ==
lst</span></td><td><div class='choice'>d.</div></td><td><span class='default'>All of the
choices</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:16' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;16.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>You need to check if two lists, lst1 and lst2, have the same elements in the
same order. Which code achieves this?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>sorted(lst1) == sorted(lst2)</span></td><td width='4%'><div
class='choice'>c.</div></td><td width='46%'><span class='default'>lst1 == lst2</span></td></tr><tr
valign='baseline'><td><div class='choice'>b.</div></td><td><span class='default'>set(lst1) ==
set(lst2)</span></td><td><div class='choice'>d.</div></td><td><span class='default'>all(x == y for x,
y in zip(lst1, lst2))</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:17' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;17.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>You are given a 2D array arr = &#091;&#091;10, 20, 30&#093;, &#091;40, 50,
60&#093;, &#091;70, 80, 90&#093;&#093;. How can you extract the second column &#091;20, 50, 80&#093;
as a list?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>arr&#091;1&#093;</span></td><td width='4%'><div class='choice'>c.</div></td><td
width='46%'><span class='default'>arr&#091;:, 1&#093;</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>&#091;row&#091;1&#093; for row in
arr&#093;</span></td><td><div class='choice'>d.</div></td><td><span
class='default'>&#091;col&#091;1&#093; for col in arr&#093;</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:18' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;18.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>You want to write unit tests for a function get_user_data(user_id) that fetches
data from a database. Which testing method would be appropriate to use in this case?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>Unit Testing with Mocking the database call</span></td><td width='4%'><div
class='choice'>c.</div></td><td width='46%'><span class='default'>Integration Testing to check if the
function interacts correctly with the database</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>Regression Testing to ensure no unintended
behavior in the database query</span></td><td><div class='choice'>d.</div></td><td><span
class='default'>Functional Testing of the get_user_data method alone</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:19' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;19.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>You are given the list lst = &#091;10, 20, 30, 40, 50&#093;. You need to insert
the value 25 between 20 and 30. Which code achieves this?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>lst.insert(2, 25)</span></td><td width='4%'><div class='choice'>c.</div></td><td
width='46%'><span class='default'>lst&#091;2&#093; = 25</span></td></tr><tr
valign='baseline'><td><div class='choice'>b.</div></td><td><span
class='default'>lst.append(25)</span></td><td><div class='choice'>d.</div></td><td><span
class='default'>lst.insert(1, 25)</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:20' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;20.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>You are testing a Python function, but it sometimes works and sometimes throws
errors. What is the most likely cause of this behavior?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>The Python interpreter is broken.</span></td><td width='4%'><div
class='choice'>c.</div></td><td width='46%'><span class='default'>There may be a race condition or
external dependency that is affecting the behavior.</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>The function needs to be refactored to remove
redundant code.</span></td><td><div class='choice'>d.</div></td><td><span class='default'>The test
case is incorrect.</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:21' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;21.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>You have a list of integers, and you need to remove all occurrences of the
number 5 from the list. Which implementation is correct?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>def remove_fives(lst):<br>&nbsp;&nbsp;&nbsp; while 5 in
lst:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lst.remove(5)<br>&nbsp;&nbsp;&nbsp; return
lst</span></td><td width='4%'><div class='choice'>c.</div></td><td width='46%'><span
class='default'>def remove_fives(lst):<br>&nbsp;&nbsp;&nbsp; return &#091;x for x in lst if x !=
5&#093;</span></td></tr><tr valign='baseline'><td><div class='choice'>b.</div></td><td><span
class='default'>def remove_fives(lst):<br>&nbsp;&nbsp;&nbsp; return lst.remove(5)</span></td><td><div
class='choice'>d.</div></td><td><span class='default'>def remove_fives(lst):<br>&nbsp;&nbsp;&nbsp;
return lst.pop(5)</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:22' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;22.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>You are designing a function that takes a list of integers and returns the count
of even numbers in the list. Which of the following is most efficient?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>def count_evens(lst):<br>&nbsp;&nbsp;&nbsp; return len(&#091;x for x in lst if x % 2
== 0&#093;)</span></td><td width='4%'><div class='choice'>c.</div></td><td width='46%'><span
class='default'>def count_evens(lst):<br>&nbsp;&nbsp;&nbsp; return sum(1 for x in lst if x % 2 ==
0)<br><br><br></span></td></tr><tr valign='baseline'><td><div class='choice'>b.</div></td><td><span
class='default'>All the choices<br></span></td><td><div class='choice'>d.</div></td><td><span
class='default'>def count_evens(lst):<br>&nbsp;&nbsp;&nbsp; count = 0<br>&nbsp;&nbsp;&nbsp; for x in
lst:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if x % 2 ==
0:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; count +=
1<br>&nbsp;&nbsp;&nbsp; return count</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:23' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;23.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>In the following scenario, which principle of OOP is being
demonstrated?pythonCopy code<br>class Shape:<br>&nbsp;&nbsp;&nbsp; def
area(self):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pass<br><br>class
Circle(Shape):<br>&nbsp;&nbsp;&nbsp; def __init__(self,
radius):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.radius = radius<br><br>&nbsp;&nbsp;&nbsp;
def area(self):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 3.14 * (self.radius **
2)<br><br>circle = Circle(5)<br>print(circle.area())<br></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>Inheritance</span></td><td width='4%'><div class='choice'>c.</div></td><td
width='46%'><span class='default'>Abstraction</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>Encapsulation</span></td><td><div
class='choice'>d.</div></td><td><span class='default'>Polymorphism</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:24' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;24.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>Which of the following best describes the purpose of mocking in unit
tests?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>To replace dependencies with simulated objects to isolate the function under
test</span></td><td width='4%'><div class='choice'>c.</div></td><td width='46%'><span
class='default'>To track the performance of the code during execution</span></td></tr><tr
valign='baseline'><td><div class='choice'>b.</div></td><td><span class='default'>To simulate
real-time data inputs</span></td><td><div class='choice'>d.</div></td><td><span class='default'>To
check for memory leaks in the program</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:25' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;25.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>Consider the following Python code. You notice that the output is incorrect.
What is the most likely cause of the problem?<br>def divide(a, b):<br>&nbsp;&nbsp;&nbsp; return a /
b<br><br>result = divide(10, 0)<br>print(result)<br></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>There is no error in the code; it&#039;s working as expected.</span></td><td
width='4%'><div class='choice'>c.</div></td><td width='46%'><span class='default'>The code needs a
try-except block to handle the division by zero error.</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>The function is incorrectly written; it should
handle the division by zero.</span></td><td><div class='choice'>d.</div></td><td><span
class='default'>The function is correct, and the issue lies in the print
statement.</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:26' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;26.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>You are building a game where each character can have multiple abilities. You
define a base class Character with basic attributes like name and health. Then, subclasses like
Warrior, Mage, and Archer are derived from it, each having their unique abilities. Which principle of
OOP is being demonstrated here?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>Inheritance</span></td><td width='4%'><div class='choice'>c.</div></td><td
width='46%'><span class='default'>Polymorphism</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>Encapsulation</span></td><td><div
class='choice'>d.</div></td><td><span class='default'>Abstraction</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:27' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;27.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>A function divide_numbers is supposed to divide two numbers, but it should raise
an exception if the divisor is zero. Which implementation achieves this?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>def divide_numbers(a, b):<br>&nbsp;&nbsp;&nbsp;
try:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return a / b<br>&nbsp;&nbsp;&nbsp; except
ZeroDivisionError:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 0</span></td><td
width='4%'><div class='choice'>c.</div></td><td width='46%'><span class='default'>def
divide_numbers(a, b):<br>&nbsp;&nbsp;&nbsp; if b == 0:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return 0<br>&nbsp;&nbsp;&nbsp; return a / b</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>def divide_numbers(a, b):<br>&nbsp;&nbsp;&nbsp;
return a / b</span></td><td><div class='choice'>d.</div></td><td><span class='default'>def
divide_numbers(a, b):<br>&nbsp;&nbsp;&nbsp; if b == 0:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
raise ValueError(&quot;Divisor cannot be zero.&quot;)<br>&nbsp;&nbsp;&nbsp; return a /
b</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:28' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;28.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>If you have the following code, what will happen when you instantiate the Bird
class and call bird.fly()?<br>class Animal:<br>&nbsp;&nbsp;&nbsp; def
sound(self):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print(&quot;Animal
sound&quot;)<br><br>class Bird(Animal):<br>&nbsp;&nbsp;&nbsp; def
fly(self):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print(&quot;Flying&quot;)<br><br>bird =
Bird()<br>bird.fly()<br></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>It will raise an error because the method fly is not defined in
Animal.</span></td><td width='4%'><div class='choice'>c.</div></td><td width='46%'><span
class='default'>It will print &quot;Flying&quot;.</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>It will print nothing.</span></td><td><div
class='choice'>d.</div></td><td><span class='default'>It will print &quot;Animal
sound&quot;.</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:29' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;29.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>A software application requires a function to compute the average length of
words in a given sentence. Punctuation marks should not be included. Which implementation is
best?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>def average_word_length(sentence):<br>&nbsp;&nbsp;&nbsp; words =
sentence.split()<br>&nbsp;&nbsp;&nbsp; return sum(len(word) for word in words) /
len(words)</span></td><td width='4%'><div class='choice'>c.</div></td><td width='46%'><span
class='default'>def average_word_length(sentence):<br>&nbsp;&nbsp;&nbsp; return len(sentence) /
len(sentence.split())</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>def
average_word_length(sentence):<br>&nbsp;&nbsp;&nbsp; words = sentence.split()<br>&nbsp;&nbsp;&nbsp;
total_length = 0<br>&nbsp;&nbsp;&nbsp; for word in
words:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; total_length +=
len(word.strip())<br>&nbsp;&nbsp;&nbsp; return total_length / len(words)</span></td><td><div
class='choice'>d.</div></td><td><span class='default'>def
average_word_length(sentence):<br>&nbsp;&nbsp;&nbsp; words = sentence.split()<br>&nbsp;&nbsp;&nbsp;
return sum(len(word.strip(&quot;.,!?&quot;)) for word in words) /
len(words)</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:30' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;30.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>Given the following code, what would be an appropriate debugging strategy if the
program is not printing anything?<br>def calculate(x, y):<br>&nbsp;&nbsp;&nbsp; result = x *
y<br>&nbsp;&nbsp;&nbsp; if result &gt; 100:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
print(&quot;Large result!&quot;)<br></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>All of the choices</span></td><td width='4%'><div class='choice'>c.</div></td><td
width='46%'><span class='default'>Check if the input values for x and y are
correct.</span></td></tr><tr valign='baseline'><td><div class='choice'>b.</div></td><td><span
class='default'>Inspect whether the condition if result &gt; 100 is ever met.</span></td><td><div
class='choice'>d.</div></td><td><span class='default'>Add a print() statement to check the value of
result.</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:31' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;31.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>You need to rotate a list lst = &#091;1, 2, 3, 4, 5&#093; to the left by two
positions to get &#091;3, 4, 5, 1, 2&#093;. Which implementation is correct?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>lst = lst&#091;2:&#093; + lst&#091;:2&#093;</span></td><td width='4%'><div
class='choice'>c.</div></td><td width='46%'><span class='default'>lst = &#091;lst&#091;2&#093;,
lst&#091;3&#093;, lst&#091;4&#093;, lst&#091;0&#093;, lst&#091;1&#093;&#093;</span></td></tr><tr
valign='baseline'><td><div class='choice'>b.</div></td><td><span class='default'>lst =
lst&#091;1:&#093; + lst&#091;:1&#093;</span></td><td><div class='choice'>d.</div></td><td><span
class='default'>lst = lst&#091;-2:&#093; + lst&#091;:-2&#093;</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:32' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;32.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>A company needs a function to calculate the average of a list of numbers, but
the list may be empty. If the list is empty, the function should return None. Which function
implementation meets this requirement?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>def average(lst):<br>&nbsp;&nbsp;&nbsp; return None</span></td><td width='4%'><div
class='choice'>c.</div></td><td width='46%'><span class='default'>def
average(lst):<br>&nbsp;&nbsp;&nbsp; if not lst:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
print(&quot;Empty list&quot;)<br>&nbsp;&nbsp;&nbsp;
else:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return sum(lst) / len(lst)</span></td></tr><tr
valign='baseline'><td><div class='choice'>b.</div></td><td><span class='default'>def
average(lst):<br>&nbsp;&nbsp;&nbsp; return sum(lst) / len(lst)</span></td><td><div
class='choice'>d.</div></td><td><span class='default'>def average(lst):<br>&nbsp;&nbsp;&nbsp; if
len(lst) == 0:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return None<br>&nbsp;&nbsp;&nbsp; return
sum(lst) / len(lst)</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:33' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;33.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>You are working with a list of numbers and need to slice it to extract the last
three elements. Which slicing operation is correct?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>lst&#091;3:&#093;</span></td><td width='4%'><div class='choice'>c.</div></td><td
width='46%'><span class='default'>lst&#091;:3&#093;</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>lst&#091;-3:&#093;</span></td><td><div
class='choice'>d.</div></td><td><span
class='default'>lst&#091;-1:-4&#093;</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:34' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;34.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>Which of the following is the primary advantage of using inheritance in
object-oriented programming?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>Allows creating more specific classes based on a general class</span></td><td
width='4%'><div class='choice'>c.</div></td><td width='46%'><span class='default'>Increases the
performance of the program</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>Encapsulates functionality into separate
modules</span></td><td><div class='choice'>d.</div></td><td><span class='default'>Reduces the number
of lines of code</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:35' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;35.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>You are building a program where a function should return the maximum of three
numbers. Which function implementation correctly achieves this?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>def max_of_three(a, b, c):<br>&nbsp;&nbsp;&nbsp; if a &gt; b and a &gt;
c:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return a<br>&nbsp;&nbsp;&nbsp; elif b &gt;
c:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return b<br>&nbsp;&nbsp;&nbsp;
else:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return c</span></td><td width='4%'><div
class='choice'>c.</div></td><td width='46%'><span class='default'>All of the
choices</span></td></tr><tr valign='baseline'><td><div class='choice'>b.</div></td><td><span
class='default'>def max_of_three(a, b, c):<br>&nbsp;&nbsp;&nbsp; return sorted(&#091;a, b,
c&#093;)&#091;-1&#093;</span></td><td><div class='choice'>d.</div></td><td><span class='default'>def
max_of_three(a, b, c):<br>&nbsp;&nbsp;&nbsp; return max(a, b, c)</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:36' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;36.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>If you are designing a system where Vehicle is a superclass and Car, Truck, and
Motorcycle are subclasses, but you do not want to allow instantiation of the Vehicle class directly,
which approach should you use?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>Use an abstract base class</span></td><td width='4%'><div
class='choice'>c.</div></td><td width='46%'><span class='default'>Make the Vehicle class
private</span></td></tr><tr valign='baseline'><td><div class='choice'>b.</div></td><td><span
class='default'>Override the __init__ method in each subclass</span></td><td><div
class='choice'>d.</div></td><td><span class='default'>Remove the constructor from
Vehicle</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:37' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;37.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>You are given a list lst = &#091;2, 4, 6, 8, 10&#093;. You want to compute the
cumulative product of elements to get &#091;2, 8, 48, 384, 3840&#093;. Which implementation achieves
this?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'>result = &#091;&#093;<br>product = 1<br>for num in lst:<br>&nbsp;&nbsp;&nbsp; product
*= num<br>&nbsp;&nbsp;&nbsp; result.append(product)<br>result<br></span></td></tr><tr
valign='baseline'><td><div class='choice'>b.</div></td><td><span class='default'>lst =
&#091;lst&#091;i&#093; * lst&#091;i - 1&#093; for i in range(len(lst))&#093;<br></span></td></tr><tr
valign='baseline'><td><div class='choice'>c.</div></td><td><span class='default'>import
math<br>&#091;math.prod(lst&#091;:i + 1&#093;) for i in range(len(lst))&#093;<br></span></td></tr><tr
valign='baseline'><td><div class='choice'>d.</div></td><td><span class='default'>lst = &#091;2 * 4 *
6 * 8 * 10&#093;<br></span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:38' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;38.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>Consider the following code snippet. If you instantiate an object of the Car
class and call car.describe(), what will be the output?<br>class Vehicle:<br>&nbsp;&nbsp;&nbsp; def
describe(self):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print(&quot;This is a
vehicle&quot;)<br><br>class Car(Vehicle):<br>&nbsp;&nbsp;&nbsp; def
describe(self):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print(&quot;This is a
car&quot;)<br><br>car = Car()<br>car.describe()<br></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>This is a vehicle</span></td><td width='4%'><div class='choice'>c.</div></td><td
width='46%'><span class='default'>Nothing, the method is inherited but not called</span></td></tr><tr
valign='baseline'><td><div class='choice'>b.</div></td><td><span class='default'>Error, describe
method is not defined in the Car class</span></td><td><div class='choice'>d.</div></td><td><span
class='default'>This is a car</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:39' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;39.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>You have a list lst = &#091;1, 2, 3, 4, 5&#093; and want to replace the first
three elements with &#091;10, 20, 30&#093; to get &#091;10, 20, 30, 4, 5&#093;. Which code achieves
this?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>lst&#091;0:2&#093; = &#091;10, 20, 30&#093;</span></td><td width='4%'><div
class='choice'>c.</div></td><td width='46%'><span class='default'>lst&#091;:3&#093; = &#091;10, 20,
30&#093;</span></td></tr><tr valign='baseline'><td><div class='choice'>b.</div></td><td><span
class='default'>lst&#091;:3&#093; = 10, 20, 30</span></td><td><div
class='choice'>d.</div></td><td><span class='default'>lst&#091;1:4&#093; = &#091;10, 20,
30&#093;</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:40' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;40.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>You want to reverse a list lst = &#091;1, 2, 3, 4&#093;. Which approach is
correct?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>reversed(lst)<br></span></td><td width='4%'><div class='choice'>c.</div></td><td
width='46%'><span class='default'>All of the choices</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>lst.reverse()<br></span></td><td><div
class='choice'>d.</div></td><td><span
class='default'>lst&#091;::-1&#093;<br></span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:41' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;41.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>A function is needed to calculate the Fibonacci sequence up to the
n<sup>th</sup> term. Which of the following recursive implementations is correct?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>def fibonacci(n):<br>&nbsp;&nbsp;&nbsp; if n &lt;=
0:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 0<br>&nbsp;&nbsp;&nbsp; elif n ==
1:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 1<br>&nbsp;&nbsp;&nbsp;
else:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return fibonacci(n - 1) + fibonacci(n -
2)</span></td><td width='4%'><div class='choice'>c.</div></td><td width='46%'><span
class='default'>def fibonacci(n):<br>&nbsp;&nbsp;&nbsp; result = &#091;&#093;<br>&nbsp;&nbsp;&nbsp;
for i in range(n):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
result.append(i)<br>&nbsp;&nbsp;&nbsp; return result</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>def fibonacci(n):<br>&nbsp;&nbsp;&nbsp; return
n</span></td><td><div class='choice'>d.</div></td><td><span class='default'>def
fibonacci(n):<br>&nbsp;&nbsp;&nbsp; if n == 0:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
0<br>&nbsp;&nbsp;&nbsp; return fibonacci(n - 1) + fibonacci(n - 2)</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:42' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;42.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>You need a function that takes a string as input and returns the number of
vowels in the string. Which implementation is correct?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>All of the choices</span></td><td width='4%'><div class='choice'>c.</div></td><td
width='46%'><span class='default'>def count_vowels(s):<br>&nbsp;&nbsp;&nbsp; return len(&#091;char
for char in s if char in &quot;aeiouAEIOU&quot;&#093;)<br></span></td></tr><tr
valign='baseline'><td><div class='choice'>b.</div></td><td><span class='default'>def
count_vowels(s):<br>&nbsp;&nbsp;&nbsp; count = 0<br>&nbsp;&nbsp;&nbsp; for char in
s:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if char in
&quot;aeiou&quot;:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; count +=
1<br>&nbsp;&nbsp;&nbsp; return count<br></span></td><td><div class='choice'>d.</div></td><td><span
class='default'>def count_vowels(s):<br>&nbsp;&nbsp;&nbsp; return sum(1 for char in s if char.lower()
in &quot;aeiou&quot;)<br></span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:43' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;43.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>You have a nested list arr = &#091;&#091;1, 2&#093;, &#091;3, 4&#093;, &#091;5,
6&#093;&#093; and need to flatten it into a single list &#091;1, 2, 3, 4, 5, 6&#093;. Which
implementation is correct?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>list(chain.from_iterable(arr))<br></span></td><td width='4%'><div
class='choice'>c.</div></td><td width='46%'><span class='default'>reduce(lambda x, y: x + y,
arr)<br></span></td></tr><tr valign='baseline'><td><div class='choice'>b.</div></td><td><span
class='default'>&#091;item for sublist in arr for item in
sublist&#093;<br></span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:44' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;44.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>You are creating a function to reverse a string and convert it to uppercase.
Which implementation is correct?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>def transform_string(s):<br>&nbsp;&nbsp;&nbsp; s =
s&#091;::-1&#093;.upper()</span></td><td width='4%'><div class='choice'>c.</div></td><td
width='46%'><span class='default'>def transform_string(s):<br>&nbsp;&nbsp;&nbsp; return
s.upper()&#091;::-1&#093;</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>def transform_string(s):<br>&nbsp;&nbsp;&nbsp;
print(s&#091;::-1&#093;.upper())</span></td><td><div class='choice'>d.</div></td><td><span
class='default'>def transform_string(s):<br>&nbsp;&nbsp;&nbsp; return
s&#091;::-1&#093;.upper()</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:45' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;45.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>You are given two lists, a = &#091;1, 2, 3&#093; and b = &#091;4, 5, 6&#093;.
You need to create a list of tuples &#091;(1, 4), (2, 5), (3, 6)&#093;. Which code is correct?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>&#091;(x, y) for x, y in zip(a, b)&#093;<br></span></td><td width='4%'><div
class='choice'>c.</div></td><td width='46%'><span class='default'>&#091;(a&#091;i&#093;,
b&#091;i&#093;) for i in range(len(a))&#093;<br></span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>All of the choices</span></td><td><div
class='choice'>d.</div></td><td><span class='default'>list(zip(a,
b))<br></span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:46' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;46.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>Which debugging tool would be most suitable if you want to track the values of
variables throughout the execution of a Python program?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>pdb (Python Debugger)</span></td><td width='4%'><div class='choice'>c.</div></td><td
width='46%'><span class='default'>unittest framework</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>timeit module</span></td><td><div
class='choice'>d.</div></td><td><span class='default'>pytest</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:47' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;47.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>A function is required to return the greatest common divisor (GCD) of two
numbers using recursion. Which implementation is correct?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>def gcd(a, b):<br>&nbsp;&nbsp;&nbsp; while
b:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a, b = b, a % b<br>&nbsp;&nbsp;&nbsp; return
a</span></td><td width='4%'><div class='choice'>c.</div></td><td width='46%'><span
class='default'>def gcd(a, b):<br>&nbsp;&nbsp;&nbsp; return a // b</span></td></tr><tr
valign='baseline'><td><div class='choice'>b.</div></td><td><span class='default'>def gcd(a,
b):<br>&nbsp;&nbsp;&nbsp; if b == 0:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
a<br>&nbsp;&nbsp;&nbsp; return gcd(b, a % b)</span></td><td><div
class='choice'>d.</div></td><td><span class='default'>def gcd(a, b):<br>&nbsp;&nbsp;&nbsp; return a
if b == 0 else b</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:48' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;48.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>Consider the following code. What type of error would you expect to encounter
during testing?<br>def add_numbers(a, b):<br>&nbsp;&nbsp;&nbsp; return a +
b<br><br>print(add_numbers(10, &quot;5&quot;))<br></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>ValueError</span></td><td width='4%'><div class='choice'>c.</div></td><td
width='46%'><span class='default'>SyntaxError</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>TypeError</span></td><td><div
class='choice'>d.</div></td><td><span
class='default'>ZeroDivisionError</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:49' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;49.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>You are given a list lst = &#091;1, 2, 3, 4, 5&#093; and need to replace the
middle element with 99 to get &#091;1, 2, 99, 4, 5&#093;. Which code achieves this?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>lst&#091;3&#093; = 99<br></span></td><td width='4%'><div
class='choice'>c.</div></td><td width='46%'><span class='default'>both lst&#091;2&#093; = 99 and
lst&#091;len(lst) // 2&#093; = 99<br></span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>lst&#091;2&#093; = 99<br></span></td><td><div
class='choice'>d.</div></td><td><span class='default'>lst&#091;len(lst) // 2&#093; =
99<br></span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:50' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;50.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>You are tasked with creating a function to merge two dictionaries. If both
dictionaries have the same key, the value from the second dictionary should overwrite the first.
Which implementation is NOT correct?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>def merge_dicts(d1, d2):<br>&nbsp;&nbsp;&nbsp; result =
d1.copy()<br>&nbsp;&nbsp;&nbsp; result.update(d2)<br>&nbsp;&nbsp;&nbsp; return result</span></td><td
width='4%'><div class='choice'>c.</div></td><td width='46%'><span class='default'>def merge_dicts(d1,
d2):<br>&nbsp;&nbsp;&nbsp; for key, value in
d2.items():<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; d1&#091;key&#093; =
value<br>&nbsp;&nbsp;&nbsp; return d1</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>All of the choices</span></td><td><div
class='choice'>d.</div></td><td><span class='default'>def merge_dicts(d1, d2):<br>&nbsp;&nbsp;&nbsp;
return {**d1, **d2}</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:51' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;51.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>You are given a 2D array arr = &#091;&#091;1, 2&#093;, &#091;3, 4&#093;,
&#091;5, 6&#093;&#093;. How do you access the value 4?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>arr&#091;1&#093;&#091;0&#093;</span></td><td width='4%'><div
class='choice'>c.</div></td><td width='46%'><span
class='default'>arr&#091;2&#093;&#091;1&#093;</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span
class='default'>arr&#091;0&#093;&#091;1&#093;</span></td><td><div
class='choice'>d.</div></td><td><span
class='default'>arr&#091;1&#093;&#091;1&#093;</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:52' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;52.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>A function is required to generate a dictionary where the keys are numbers from
1 to n and the values are the squares of these numbers. Which implementation is not correct?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>All of the choices</span></td><td width='4%'><div class='choice'>c.</div></td><td
width='46%'><span class='default'>def generate_square_dict(n):<br>&nbsp;&nbsp;&nbsp; result =
{}<br>&nbsp;&nbsp;&nbsp; for i in range(1, n+1):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
result&#091;i&#093; = i**2<br>&nbsp;&nbsp;&nbsp; return result<br></span></td></tr><tr
valign='baseline'><td><div class='choice'>b.</div></td><td><span class='default'>def
generate_square_dict(n):<br>&nbsp;&nbsp;&nbsp; return {i: i**2 for i in range(1,
n+1)}<br></span></td><td><div class='choice'>d.</div></td><td><span class='default'>def
generate_square_dict(n):<br>&nbsp;&nbsp;&nbsp; return {i: i*i for i in
range(n)}<br></span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:53' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;53.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>You have two lists, list1 = &#091;1, 2, 3&#093; and list2 = &#091;4, 5, 6&#093;.
You want to combine them into a single list &#091;1, 2, 3, 4, 5, 6&#093;. Which approach is
correct?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>list1 + list2</span></td><td width='4%'><div class='choice'>c.</div></td><td
width='46%'><span class='default'>list1.extend(list2)</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>list1.append(list2)</span></td><td><div
class='choice'>d.</div></td><td><span class='default'>list1.insert(3,
list2)</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:54' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;54.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>You are using the pdb debugger to troubleshoot your code. What command will
allow you to step through the program line by line?<br>import pdb<br><br>def calculate_total(price,
tax):<br>&nbsp;&nbsp;&nbsp; pdb.set_trace()<br>&nbsp;&nbsp;&nbsp; total = price + (price *
tax)<br>&nbsp;&nbsp;&nbsp; return total<br><br>result = calculate_total(100, 0.05)<br></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>step</span></td><td width='4%'><div class='choice'>c.</div></td><td width='46%'><span
class='default'>continue</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>next</span></td><td><div
class='choice'>d.</div></td><td><span class='default'>run</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:55' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;55.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>You need a function that filters out all numbers less than 10 from a list and
returns the filtered list. Which implementation achieves this?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>def filter_numbers(lst):<br>&nbsp;&nbsp;&nbsp; return sum(x for x in lst if x &gt;=
10)</span></td><td width='4%'><div class='choice'>c.</div></td><td width='46%'><span
class='default'>def filter_numbers(lst):<br>&nbsp;&nbsp;&nbsp; return &#091;x for x in lst if x &lt;
10&#093;</span></td></tr><tr valign='baseline'><td><div class='choice'>b.</div></td><td><span
class='default'>def filter_numbers(lst):<br>&nbsp;&nbsp;&nbsp; return &#091;x for x in lst if x &gt;=
10&#093;</span></td><td><div class='choice'>d.</div></td><td><span class='default'>def
filter_numbers(lst):<br>&nbsp;&nbsp;&nbsp; return lst</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:56' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;56.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>Consider the following code:<br>class Animal:<br>&nbsp;&nbsp;&nbsp; def
make_sound(self):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pass<br><br>class
Dog(Animal):<br>&nbsp;&nbsp;&nbsp; def
make_sound(self):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return &quot;Bark&quot;<br><br>class
Cat(Animal):<br>&nbsp;&nbsp;&nbsp; def
make_sound(self):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
&quot;Meow&quot;<br><br>animals = &#091;Dog(), Cat()&#093;<br>for animal in
animals:<br>&nbsp;&nbsp;&nbsp; print(animal.make_sound())<br><br>What will be the output of the above
code?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>Dog Cat</span></td><td width='4%'><div class='choice'>c.</div></td><td
width='46%'><span class='default'>Bark Meow</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>Bark Bark</span></td><td><div
class='choice'>d.</div></td><td><span class='default'>Error: Method make_sound is not
implemented</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:57' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;57.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>You are tasked to write a function that takes two integers as input and returns
True if the first number is divisible by the second. If the second number is zero, it should return
False. Which implementation is correct?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>def is_divisible(a, b):<br>&nbsp;&nbsp;&nbsp; if b ==
0:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return False<br>&nbsp;&nbsp;&nbsp; return a % b ==
0</span></td><td width='4%'><div class='choice'>c.</div></td><td width='46%'><span
class='default'>def is_divisible(a, b):<br>&nbsp;&nbsp;&nbsp; return a // b</span></td></tr><tr
valign='baseline'><td><div class='choice'>b.</div></td><td><span class='default'>def is_divisible(a,
b):<br>&nbsp;&nbsp;&nbsp; return a % b == 0</span></td><td><div class='choice'>d.</div></td><td><span
class='default'>def is_divisible(a, b):<br>&nbsp;&nbsp;&nbsp; if b ==
0:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
print(&quot;Error&quot;)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
None<br>&nbsp;&nbsp;&nbsp; return a % b == 0</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:58' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;58.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>You are tasked with creating a function that converts a list of tuples into a
dictionary. Each tuple contains a key-value pair. Which implementation is correct?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>def tuples_to_dict(tuples):<br>&nbsp;&nbsp;&nbsp; result = {}<br>&nbsp;&nbsp;&nbsp;
for key, value in tuples:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result&#091;key&#093; =
value<br>&nbsp;&nbsp;&nbsp; return result</span></td><td width='4%'><div
class='choice'>c.</div></td><td width='46%'><span class='default'>def
tuples_to_dict(tuples):<br>&nbsp;&nbsp;&nbsp; return dict(tuples)</span></td></tr><tr
valign='baseline'><td><div class='choice'>b.</div></td><td><span class='default'>All of the
choices</span></td><td><div class='choice'>d.</div></td><td><span class='default'>def
tuples_to_dict(tuples):<br>&nbsp;&nbsp;&nbsp; return {t&#091;0&#093;: t&#091;1&#093; for t in
tuples}</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:59' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;59.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>You are designing an online store with classes Product, Cart, and Order. Each
subclass overrides the calculate_total() method differently based on the type of product. Which OOP
concept is best represented by this design?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>Encapsulation</span></td><td width='4%'><div class='choice'>c.</div></td><td
width='46%'><span class='default'>Abstraction</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>Polymorphism</span></td><td><div
class='choice'>d.</div></td><td><span class='default'>Inheritance</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:60' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;60.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>You are tasked with writing a program that finds the factorial of a number using
recursion. Which of the following is the most appropriate function definition?</div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='46%'><span
class='default'>def factorial(n):<br>&nbsp;&nbsp;&nbsp; result = 1<br>&nbsp;&nbsp;&nbsp; for i in
range(1, n + 1):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result *= i<br>&nbsp;&nbsp;&nbsp;
return result</span></td><td width='4%'><div class='choice'>c.</div></td><td width='46%'><span
class='default'>def factorial(n):<br>&nbsp;&nbsp;&nbsp; return n *
factorial(n)<br></span></td></tr><tr valign='baseline'><td><div class='choice'>b.</div></td><td><span
class='default'>def factorial(n):<br>&nbsp;&nbsp;&nbsp; if n == 0 or n ==
1:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 1<br>&nbsp;&nbsp;&nbsp;
else:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return n * factorial(n -
1)<br></span></td><td><div class='choice'>d.</div></td><td><span class='default'>def
factorial(n):<br>&nbsp;&nbsp;&nbsp; print(n * factorial(n - 1))<br></span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
</table>
<br clear='all'>
<br>
<br>
<table align='left' width='100%' cellpadding='0' cellspacing='0' border='0'>
<tr>
    <td bgcolor='#000000'>
    <div style='font-size:1pt'>&nbsp;</div>
    </td>
</tr>
<tr>
    <td><input type='image' src='programming_logic_a_files/submit.gif' alt='Grade and Submit'>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	<a href='#' onclick='Restart(); return false'><img
	    src='programming_logic_a_files/restart.gif' border='0' alt='Start Over'></a>
    </td>
</tr>
</table>
</form>
</body>
</html>